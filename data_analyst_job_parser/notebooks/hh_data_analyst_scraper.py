# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π HH.ru
# –ê–≤—Ç–æ—Ä: [—Ç–≤–æ–µ –∏–º—è], 2025
# –¶–µ–ª—å: –°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞

...
# üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ data/hh_data_analyst.csv
import requests
import pandas as pd
import time
from tqdm import tqdm
from bs4 import BeautifulSoup

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
KEYWORDS = [
    "–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö", "data analyst", "–∞–Ω–∞–ª–∏—Ç–∏–∫", "BI –∞–Ω–∞–ª–∏—Ç–∏–∫",
    "data –∞–Ω–∞–ª–∏—Ç–∏–∫", "–ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", "business analyst",
    "Power BI", "Tableau", "SQL –∞–Ω–∞–ª–∏—Ç–∏–∫", "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"
]
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π HH.ru
# –ê–≤—Ç–æ—Ä: [—Ç–≤–æ–µ –∏–º—è], 2025
# –¶–µ–ª—å: –°–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞

...
# üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ data/hh_data_analyst.csv
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º –Ω–∞–≤—ã–∫–∞–º
FILTER_SKILLS = ["sql", "excel", "bi", "python"]

# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—é–¥–∞
RESULT_FILE = "hh_data_analyst.csv"

def get_vacancies(text):
    url = "https://api.hh.ru/vacancies"
    params = {
        "text": text,
        "area": 113,  # –†–æ—Å—Å–∏—è
        "per_page": 100,
        "page": 0
    }
    vacancies = []
    while True:
        response = requests.get(url, params=params)
        data = response.json()
        vacancies.extend(data["items"])
        if data["pages"] - 1 == params["page"]:
            break
        params["page"] += 1
        time.sleep(0.2)
    return vacancies

def get_vacancy_details(vacancy_id):
    url = f"https://api.hh.ru/vacancies/{vacancy_id}"
    response = requests.get(url)
    return response.json()

def clean_text(text):
    if not text:
        return ""
    soup = BeautifulSoup(text, "html.parser")
    clean = soup.get_text(separator=" ").lower().strip()
    clean = " ".join(clean.split())
    return clean

def main():
    all_vacancies = []
    print("üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")
    seen_ids = set()

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    for kw in KEYWORDS:
        for v in get_vacancies(kw):
            if v["id"] not in seen_ids:
                seen_ids.add(v["id"])
                all_vacancies.append(v)

    print(f"üì• –ù–∞–π–¥–µ–Ω–æ {len(all_vacancies)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π")
    details = []

    for v in tqdm(all_vacancies, desc="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏"):
        vacancy_data = get_vacancy_details(v["id"])
        description = clean_text(vacancy_data.get("description"))
        employer = vacancy_data.get("employer", {}).get("name", "")
        specialization = (
            vacancy_data.get("specializations")[0]["name"]
            if vacancy_data.get("specializations") else ""
        )
        industry = (
            vacancy_data.get("employer", {}).get("industries")[0]["name"]
            if vacancy_data.get("employer", {}).get("industries") else ""
        )
        salary = vacancy_data.get("salary")
        salary_from = salary.get("from") if salary else None
        salary_to = salary.get("to") if salary else None

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–≤—ã–∫–∞–º
        if any(skill in description for skill in FILTER_SKILLS):
            details.append({
                "id": vacancy_data["id"],
                "name": vacancy_data.get("name", ""),
                "employer": employer,
                "specialization": specialization,
                "industry": industry,
                "description": description,
                "salary_from": salary_from,
                "salary_to": salary_to,
                "published_at": vacancy_data.get("published_at")
            })

        time.sleep(0.2)

    print(f"‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ {len(details)} –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    df = pd.DataFrame(details)
    df.to_csv(RESULT_FILE, index=False, encoding="utf-8-sig")
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {RESULT_FILE}")

if __name__ == "__main__":
    main()